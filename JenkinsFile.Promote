#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def nodejs = tool 'NodeJS_6'
  def sonarUrl = "https://sonar.gs.mil"
  def projectKey = "venicegeo:piazza:pzsvc-ndwi-py"
  def projectName = "venicegeo:piazza:pzsvc-ndwi-py"

if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
withEnv(["CF_HOME=.cf"]) {

  def authenticatePcf = { ->
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]]) {
        sh """
          cf api ${env.PCF_API_ENDPOINT}
          cf auth ${CFUSER} ${CFPASS}
        """

      }
    }

  stage('Setup') {
    deleteDir()
    // github is open gitlab requires credentials to clone
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

//   stage('Build') {

//     authenticatePcf()
//     sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"    

//     // go to CF apps, see which version is running on STAGE, then find that exact version and pull that version from nexus
//     def appName = sh(script: "cf apps | grep 'pzsvc-ndwi-py' | cut -f1 -d ' ' ", returnStdout: true)
//     appName = appName.trim() 
//     def appvers = appName[-17..-1]

//      sh """
//       sed -i 's,\${env.ARTIFACT_STORAGE_URL},${env.ARTIFACT_STORAGE_URL},g' pom.xml
//       ${mvn}/bin/mvn clean package -U -Dmaven.repo.local=${root}
//       cp ${root}/target/piazza-docs-1.0.0.jar ${root}/pzsvc-ndwi-py.jar
//      """
//     // Check if exists already
//     def getDependencyStatus = sh(script: """mvn -X --settings ~/.m2/settings.xml dependency:get \
//       -Dmaven.repo.local="${root}/.m2/repository" \
//       -DrepositoryId=nexus \
//       -DartifactId=pzsvc-ndwi-py \
//       -Dversion=${appvers} \
//       -DgroupId="org.venice.piazza" \
//       -Dpackaging=jar \
//       -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
//     """, returnStatus: true)
//     echo "dependency status = ${getDependencyStatus}"
//     if (getDependencyStatus == 0) {
//       echo "Artifact version ${appvers} exists in Nexus, nothing to do"
//     } else {
//       //the build should already exist because we are pushing an existing version
//       error("Build Failed")
//     }
// }

  stage ('Deploy') {

    authenticatePcf()
    sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"    

    // go to CF apps, see which version is running on STAGE, then find that exact version and pull that version from nexus
    def appName = sh(script: "cf apps | grep 'pzsvc-ndwi-py' | cut -f1 -d ' ' ", returnStdout: true) 
    appName = appName.trim() 
    def appvers = appName[-18..-1]
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PROD_PCF_SPACE}"
        sh "cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.JAVA_BUILDPACK_NAME} -d ${env.PROD_PCF_DOMAIN} --no-start"
        try {

      //all environment variables go here
          sh "cf set-env ${appName} SPACE ${env.PROD_PCF_SPACE}"
          sh "cf set-env ${appName} DOMAIN ${env.PROD_PCF_DOMAIN}"
          if(env.GITLAB_CREDS) {
            sh "cf set-env ${appName} REQUESTS_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt"
          }
          sh "cf start ${appName}"
        } catch (Exception e) {
        try {
          sh "cf logs --recent ${appName}"
        } catch (Exception ex) {
          echo "Printing logs failed: ${ex}"
        }
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
    }
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PROD_PCF_SPACE}"
        def legacyAppNames = sh(script: "cf routes | grep \"pzsvc-ndwi-py \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PROD_PCF_DOMAIN} --hostname pzsvc-ndwi-py"
        sh "cf map-route ${appName} ${env.PROD_PCF_DOMAIN} --hostname piazza"
        // Remove Legacy applications
        for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
          def legacyAppName = legacyApp.toString().trim()
          if (legacyAppName != appName) {
            sh "cf unmap-route ${legacyAppName} ${env.PROD_PCF_DOMAIN} --hostname pzsvc-ndwi-py"
            sh "cf unmap-route ${legacyAppName} ${env.PROD_PCF_DOMAIN} --hostname piazza"
            sh "cf delete -f ${legacyAppName} -r"
          }
        }
      }
    }
}
}
