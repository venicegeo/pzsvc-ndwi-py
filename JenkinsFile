#!/usr/bin/groovy

node {
    def root = pwd()
    def nodejs = tool 'NodeJS_6'
    def mvn = tool 'M3'

    stage("Setup") {
      deleteDir()
      if(env.GITLAB_CREDS) {
        git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
      } else {
        git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
      }
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_READ_ONLY_CREDS}", usernameVariable: "USER", passwordVariable: "PASS"]]) {
        sh 'sed -i "s*CONDA_CHANNEL*`echo "${CONDA_CHANNEL_URL}" | sed "s#://#://${USER}:${PASS}@#g"`*g" environment.yml'
      }
    }

    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true).trim()
    def appName = "pzsvc-ndwi-${appvers}"

    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        def piazza_api_key = "empty"
        def piazza_url = "https://piazza.${env.PHASE_ONE_PCF_SPACE}.${env.PIAZZA_URL}"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.BEACHFRONT_PIAZZA_AUTH}", usernameVariable: 'TOKEN', passwordVariable: 'unused']]) {
            def keyCurl = sh(script: """curl -s ${piazza_url}/v2/key -u \"${TOKEN}:\"""", returnStdout: true)
            piazza_api_key = sh(script: """echo \"${keyCurl}\"|grep -oE '\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'""", returnStdout: true).trim()
            sh """
              if [ -z $piazza_api_key ]; then
                echo "No Piazza API key found"
                exit 1
              fi
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} -b ${env.PYTHON_BUILDPACK_NAME} --no-start -u none
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf set-env ${appName} PZ_API_KEY ${piazza_api_key}
                  cf set-env ${appName} PZ_ADDR ${piazza_url}
                """

                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f -r"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"pzsvc-ndwi \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pzsvc-ndwi"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pzsvc-ndwi"
                        sh "cf delete -f ${legacyAppName} -r"
                    }
                }
            }
        }
    }
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase One Integration Tests") {
                        if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                  "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.INTEGRATION_GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.INTEGRATION_GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                        sh "sh ci/beachfront.sh"
                    }
                }
            }
        }
    }

    stage("Phase Two Deploy") {
        def piazza_api_key = "empty"
        def piazza_url = "https://piazza.${env.PHASE_TWO_PCF_SPACE}.${env.PIAZZA_URL}"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.BEACHFRONT_PIAZZA_AUTH}", usernameVariable: 'TOKEN', passwordVariable: 'unused']]) {
            def keyCurl = sh(script: """curl -s ${piazza_url}/v2/key -u \"${TOKEN}:\"""", returnStdout: true)
            piazza_api_key = sh(script: """echo \"${keyCurl}\"|grep -oE '\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'""", returnStdout: true).trim()
            sh """
              if [ -z $piazza_api_key ]; then
                echo "No Piazza API key found"
                exit 1
              fi
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_TWO_PCF_DOMAIN} -b ${env.PYTHON_BUILDPACK_NAME} --no-start -u none
                  cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}
                  cf set-env ${appName} PZ_API_KEY ${piazza_api_key}
                  cf set-env ${appName} PZ_ADDR ${piazza_url}
                """

                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f -r"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"pzsvc-ndwi \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pzsvc-ndwi"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pzsvc-ndwi"
                        sh "cf delete -f ${legacyAppName} -r"
                    }
                }
            }
        }
    }
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase Two Integration Tests") {
                        if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                  "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.INTEGRATION_GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.INTEGRATION_GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                        sh "sh ci/beachfront.sh"
                    }
                }
            }
        }
    }
}
