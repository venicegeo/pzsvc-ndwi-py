#!/usr/bin/groovy

node {
	def root = pwd()

	  stage("Setup") {
			deleteDir()
			if(env.GITLAB_CREDS) {
			  	git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
			} else {
			  	git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
			}
	  }

	def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true).trim()
    def appName = "pzsvc-snowflake-ndwi-${appvers}"

	stage("Archive") {
		//todo
	}


    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        def piazza_api_key = "empty"
        def piazza_url = "https://piazza.${env.PHASE_ONE_PCF_SPACE}.${env.PIAZZA_URL}"
        /*withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.BEACHFRONT_PIAZZA_AUTH}", usernameVariable: 'TOKEN', passwordVariable: 'unused']]) {
            def keyCurl = sh(script: """curl -s ${piazza_url}/v2/key -u \"${TOKEN}:\"""", returnStdout: true)
            piazza_api_key = sh(script: """echo \"${keyCurl}\"|grep -oE '\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'""", returnStdout: true).trim()
            sh """
              if [ -z $piazza_api_key ]; then
                echo "No Piazza API key found"
                exit 1
              fi
            """
        }*/
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_STORAGE_CREDS}", usernameVariable: "USER", passwordVariable: "PASS"]]) {
            sh 'sed -i "s*CONDA_CHANNEL*`echo $CONDA_CHANNEL | sed -e "s/NEXUSUSER/${USER}/g" | sed -e "s/NEXUSPASS/${PASS}/g"`*g" environment.yml'
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} -b ${env.PYTHON_BUILDPACK_NAME} --no-start -u none
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf set-env ${appName} PZ_API_KEY ${piazza_api_key}
                  cf set-env ${appName} PZ_ADDR ${piazza_url}
                  cf restage ${appName}
                """

                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"pzsvc-snowflake-ndwi \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pzsvc-snowflake-ndwi"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }

}

